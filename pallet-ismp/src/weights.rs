
//! Autogenerated weights for `pallet_ismp`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Abrahams-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 1024

// Executed Command:
// ../../target/release/hyperbridge
// benchmark
// pallet
// --pallet
// pallet_ismp
// --extrinsic
// *
// --chain
// local
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 20
// --output
// transfer-weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ismp.
pub trait WeightInfo {
    fn create_consensus_client() -> Weight;
}

/// Weights for pallet_ismp.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Ismp LatestStateMachineHeight (r:0 w:1)
    /// Proof Skipped: Ismp LatestStateMachineHeight (max_values: None, max_size: None, mode: Measured)
    /// Storage: Ismp ConsensusStates (r:0 w:1)
    /// Proof Skipped: Ismp ConsensusStates (max_values: None, max_size: None, mode: Measured)
    /// Storage: Ismp ConsensusClientUpdateTime (r:0 w:1)
    /// Proof Skipped: Ismp ConsensusClientUpdateTime (max_values: None, max_size: None, mode: Measured)
    /// Storage: Ismp StateCommitments (r:0 w:1)
    /// Proof Skipped: Ismp StateCommitments (max_values: None, max_size: None, mode: Measured)
    fn create_consensus_client() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6`
        //  Estimated: `1517`
        // Minimum execution time: 18_000_000 picoseconds.
        Weight::from_parts(19_000_000, 0)
            .saturating_add(Weight::from_parts(0, 1517))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(4))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Ismp LatestStateMachineHeight (r:0 w:1)
    /// Proof Skipped: Ismp LatestStateMachineHeight (max_values: None, max_size: None, mode: Measured)
    /// Storage: Ismp ConsensusStates (r:0 w:1)
    /// Proof Skipped: Ismp ConsensusStates (max_values: None, max_size: None, mode: Measured)
    /// Storage: Ismp ConsensusClientUpdateTime (r:0 w:1)
    /// Proof Skipped: Ismp ConsensusClientUpdateTime (max_values: None, max_size: None, mode: Measured)
    /// Storage: Ismp StateCommitments (r:0 w:1)
    /// Proof Skipped: Ismp StateCommitments (max_values: None, max_size: None, mode: Measured)
    fn create_consensus_client() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6`
        //  Estimated: `1517`
        // Minimum execution time: 18_000_000 picoseconds.
        Weight::from_parts(19_000_000, 0)
            .saturating_add(Weight::from_parts(0, 1517))
            .saturating_add(RocksDbWeight::get().reads(1))
            .saturating_add(RocksDbWeight::get().writes(4))
    }
}
